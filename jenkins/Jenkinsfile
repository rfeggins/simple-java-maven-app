pipeline {
    agent any

    environment {
      Integer deployed_to_qa = 91
      Integer ready_for_po = 6
      jiraSite = "Hertz-Jira"  // Hertz site
      ddtl_ID =  "ddtl-5304"
      jiraComment = "No Comment"
      gitCommitMsg = "THis is a test git message with 2 ddtl  ddtl-5404, DDTL-5309"

      //initializing a local variable
      in_progress = "https://hertzdigital.atlassian.net/rest/api/2/status/11408"
      dev_complete = "https://hertzdigital.atlassian.net/rest/api/2/status/11419"
      ready_to_deploy = "https://hertzdigital.atlassian.net/rest/api/2/status/6"
      to_do = "https://hertzdigital.atlassian.net/rest/api/2/status/11300"


    }  // End of Environment block

    stages {
        stage ('Validate Jira') {
          steps {
            script {
              def comment
              def issue
              def error_msg
              def error_no = 355

               // validate that ddtl number is found within Git Commit message
               if (ddtl_ID == "") {

                 error_msg = "NO Commit msg found within Git Commit message Error 120"
                 echo "##########################"
                 echo error_msg
                 echo "##########################"

                 comment = "${BUILD_URL} FAILED "
                 echo comment

                 currentBuild.result = 'FAILURE'
                 sh "exit ${error_no}"

               } else {
                 echo "Following DDTL IDs retrieved from git commit message"
                 echo ddtl_ID
               }

                 // retrieving jira issue
              try {
                 echo "Executing jiraGetIssue"
                   issue = jiraGetIssue idOrKey: ddtl_ID, site: jiraSite

                   if ( issue.data.toString() == "" ) {

                         error_msg = "[FAILURE - 120] jiraGetIssue api call failedÂ sh exit ${result}"
                         echo "##########################"
                         echo error_msg

                         currentBuild.result = 'FAILURE'
                         sh "exit ${error_no}"
                   } else {
                     echo "jiraGetIssue Returned successfully"
                     echo "searching for workflow state"

                     def issue_info = issue.data.toString()

                     sh """
                       echo "Searching for jira issue"
                       echo ${dev_complete}
                       echo "################################"
                     """
                   }

              } catch ( error_issue ){
                   error_msg = "[FAILURE - 130] Failed to build \n"
                   echo "The following Jira Issues are not found in"
                   echo ddtl_ID
                   echo error_msg
                   echo "##########################"
                   comment = "${BUILD_URL} FAILED"
                   currentBuild.result = 'FAILURE'
                   sh "exit ${error_no}"

              }  // End of Try block
            }  // End of script block
        }} // End of Validate Jira stage and Step



        stage('Build') {
            steps {
                sh 'mvn -v'
                echo "Build package"

                // if Build success then



        }} //End of Build Stage

        stage('Test') {
            steps {
                sh 'mvn test'
        }} // End of Test Stage
        stage('Deploy to Dev') {
            steps {
                echo "Deploy to Dev"
                sh 'ls -l'
                script {
                  def error_msg
                  jiraCommet = "Jenkins Automation\n" + "\nBuild Number " + env.BUILD_NUMBER + "\nBuild URL " + env.BUILD_URL + "\nJOB NAME " + env.JOB_NAME + "\nJOB URL " + env.JOB_URL

                  jiraComment = jiraComment + "Deployment Successful - Transitioning Jira Issue to  " + gitCommitMsg + "new State " + ready_to_deploy

                    Integer pull_request_merged = 101
                    echo "##############################################################################"
                    def transitionInput = [ transition: [ id: pull_request_merged ] ]
                    try {
                      def trans_issue = jiraTransitionIssue idOrKey: ddtl_ID , input: transitionInput, site: jiraSite
                      echo "transiton response " + trans_issue.data.toString()

                    } catch (err) {
                       error "Exception"
                       jiraAddComment idOrKey: ddtl_ID , site: jiraSite, comment: "${BUILD_URL} ERROR WHILE RELEASING ${error}"
                      currentBuild.result = 'FAILURE'
                    }
                }
        }} // End of Stage and Step

        stage('Transition to QA') {
           steps {
             echo "Deploy to QA"
             script {
               def qa_transition = jiraGetIssueTransitions idOrKey: ddtl_ID, site: jiraSite
               echo qa_transition.data.toString()

               jiraCommet = "Jenkins Automation\n" + "\nBuild Number " + env.BUILD_NUMBER + "\nBuild URL " + env.BUILD_URL + "\nJOB NAME " + env.JOB_NAME + "\nJOB URL " + env.JOB_URL
               jiraComment = jiraComment + "Deployment Successful - Transitioning Jira Issue to  " + gitCommitMsg + "new State " + ready_to_deploy


                 echo "##############################################################################"
                 def transitionInput = [ transition: [ id: deployed_to_qa ] ]
                 try {
                   def trans_issue = jiraTransitionIssue idOrKey: ddtl_ID , input: transitionInput, site: jiraSite

                 } catch (err) {
                    error "Exception Failed to Transition to Jira Issue to QA"
                    jiraAddComment idOrKey: ddtl_ID , site: jiraSite, comment: "${BUILD_URL} ERROR WHILE RELEASING ${error}"
                   currentBuild.result = 'FAILURE'
                 }
             }
           }} // End Step // End Update Jira Stage

    } // End Stages
} // End Pipeline

*/
