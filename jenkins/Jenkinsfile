
pipeline {
    agent any

    environment {
      Integer deployed_to_qa = 91
      Integer ready_for_po = 6
      jiraSite = "Hertz-Jira"  // Hertz site
      ddtl_ID =  ""
      jiraComment = "No Comment"
      gitCommitMsg = ""
      current_state = ""

      //initializing a local variable
      in_progress = "https://hertzdigital.atlassian.net/rest/api/2/status/11408"
      dev_complete = "https://hertzdigital.atlassian.net/rest/api/2/status/11419"
      ready_to_deploy = "https://hertzdigital.atlassian.net/rest/api/2/status/6"
      to_do = "https://hertzdigital.atlassian.net/rest/api/2/status/11300"

    }  // End of Environment block

    stages {
      stage('Check Jira') {
        steps {
          script {
            // ##################################################
            // get ddtl from commit Message
            gitCommitMsg = sh(returnStdout: true, script: 'git log --oneline -1 ${GIT_COMMIT}' )
            ddtl_ID = sh(returnStdout: true, script: 'git log --oneline -1 ${GIT_COMMIT} | grep -i -o ddtl-.... | tr -d "\n" ')

            echo "Commit Message:  ${gitCommitMsg}"
            echo "Jira Issues found in Git Commit Msg:  ${ddtl_ID}"

            // validate that ddtl number is found within Git gitCommitMsg message
            if (ddtl_ID == "") {
              echo "##########################"
              echo "Process Error - No DDTL Issue found in Git Commit Message\n for build  "
              echo "commit message::     " + gitCommitMsg
              echo "##########################"
              currentBuild.result = 'FAILURE'

            } else {
              echo "Following DDTL IDs retrieved from git commit message"
              echo ddtl_ID
            }

            // ##################################################
            // Check Jira for Error message
            try {
              def issue = jiraGetIssue idOrKey: ddtl_ID, site: jiraSite
              //issue["fields"]["status"]["name"]

              echo "Current Status"
              String statusName = issue.fields.status.name

              System.out.println(statusName)
            //  echo issue.fields.status.id.toString()
            /*
              if ( issue.status_int == 200 ) {

                echo "SUCCESS 200"

              } else if (issue.status_int == 404) {

                echo "ERROR 404"

              } else {
                echo issue.data.toString()
              }
            */
            } catch (groovy.lang.MissingPropertyException aaa) {
               echo "Caught GROOVY EXCEPTION"

            } catch (hudson.AbortException ae) {
                // this ambiguous condition means during a shell step, user probably aborted

                if (ae.getMessage().contains('Error Code: 404')) {
                        echo "HUDSON EXCEPTION: Error Code: 404"
                }

                echo "Failed to find jira Ticket  ${ddtl_ID}"
                echo ae.message
                currentBuild.result = 'FAILURE'

            } catch (Exception ex) {

              if ( issue.successful.toString() ) {  //true
                echo "Issue ${ddtl_ID} Exists"
              } else {
                echo "Issue ${ddtl_ID} DOESNT EXIST"
              }

              println( ex.getMessage() )
              error "Script Error trying to get Comments"
              println("Catching the exception")
            } // END TRY BLOCK
          } // END SCRIPT
        } //END STEPS
      } // END Stage

      stage('Build') {
          steps {
              echo "Build Stage - package result"
              // if Build success then
          } // End Steps
      } //End of Build Stage
      stage('Test') {
          steps {
              echo "Test Stage"
          }
      } // End of Test Stage

      stage('Deploy to Dev') {
          steps {
            script {

              Integer pull_request_merged = 101
              def transitionInput = [ transition: [ id: pull_request_merged ] ]
              def trans_issue

              echo "##############################################################################"
              echo "executing shared lib call to transFrom DevComplete to ReadyForQA"
              echo "##############################################################################"

              try {
                    trans_issue = jiraTransitionIssue idOrKey: ddtl_ID , input: transitionInput, site: jiraSite
                    echo "transiton response" + trans_issue.data.toString()

              } catch (hudson.AbortException ae) {
                        // this ambiguous condition means during a shell step, user probably aborted

                        if (ae.getMessage().contains('Error Code: 404')) {
                                echo "HUDSON EXCEPTION: Error Code: 404"
                        }
                        echo "Failed to transition  ${ddtl_ID} to Ready to Deploy"
                        echo ae.message
                        currentBuild.result = 'SUCCESS'

              } // END Catch
            } // END Script Section
         } // END Step
      } // End of Stage


    } // STAGES
    post {
            failure {
                echo 'I will always say Hello again!'
            }
        }


} // PIPELINE END
